# -*- coding: utf-8 -*-
"""ClassActivity21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xtnLacjglIKyAeLP1uqe_CzT0PMnSM43
"""

import numpy as np

class Qubit():
    def __init__(self, state=(1,0)):
        self.state = np.array(state, dtype=complex)

    def measure(self):
        probabilities = np.abs(self.state)**2
        outcome = np.random.choice([0, 1], p=probabilities)
        self.state = np.array([1, 0]) if outcome == 0 else np.array([0, 1])
        return outcome

class QuantumGate():
  def apply(self, qbit):
    raise NotImplementedError("This method should be implemented by subclasses")

class PauliXGate(QuantumGate):
  def apply(self, qubit):
    X = np.array([[0,1], [1, 0]])
    qubit.state = X.dot(qubit.state)

class HadamardGate(QuantumGate):
  def apply(self, qubit):
    H = (1/np.sqrt(2)) * np.array([[1,1], [1, -1]])
    qubit.state = H.dot(qubit.state)

qubit = Qubit()
print(f"Initial state measurement: {qubit.measure()}")

qubit = Qubit()
px = PauliXGate()
px.apply(qubit)
print(f"State measurement after Pauli-X: {qubit.measure()}")

qubit = Qubit()
h = HadamardGate()
h.apply(qubit)
print(f"State measurement after Hadamard: {qubit.measure()}")